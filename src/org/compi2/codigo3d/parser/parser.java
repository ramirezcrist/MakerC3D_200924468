
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 08 21:13:46 CST 2017
//----------------------------------------------------

package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 08 21:13:46 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\007\002\000\002\002" +
    "\004\000\002\003\003\000\002\010\002\000\002\005\006" +
    "\000\002\011\002\000\002\005\006\000\002\005\004\000" +
    "\002\005\003\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\004\000\002\004\005\000\002\004\003\000\002" +
    "\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\016\004\000\005\000\006\000\010\000\014" +
    "\000\026\000\001\002\000\016\004\020\005\014\006\007" +
    "\010\010\014\012\026\013\001\002\000\004\002\006\001" +
    "\002\000\004\002\001\001\002\000\040\002\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\001\002\000\014\004\020\005\014\006\007\010\010\014" +
    "\012\001\002\000\010\002\ufffe\024\051\025\050\001\002" +
    "\000\014\004\020\005\014\006\007\010\010\014\012\001" +
    "\002\000\016\004\020\005\014\006\007\010\010\014\012" +
    "\026\013\001\002\000\040\002\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\001\002\000" +
    "\004\002\uffff\001\002\000\010\002\ufff8\024\ufff8\025\ufff8" +
    "\001\002\000\036\002\ufff1\007\031\010\022\011\024\012" +
    "\032\013\023\016\021\017\030\020\025\021\027\022\033" +
    "\023\026\024\ufff1\025\ufff1\001\002\000\040\002\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\001\002\000\014\004\020\005\014\006\007\010\010" +
    "\014\012\001\002\000\014\004\020\005\014\006\007\010" +
    "\010\014\012\001\002\000\014\004\020\005\014\006\007" +
    "\010\010\014\012\001\002\000\014\004\020\005\014\006" +
    "\007\010\010\014\012\001\002\000\014\004\020\005\014" +
    "\006\007\010\010\014\012\001\002\000\014\004\020\005" +
    "\014\006\007\010\010\014\012\001\002\000\014\004\020" +
    "\005\014\006\007\010\010\014\012\001\002\000\014\004" +
    "\020\005\014\006\007\010\010\014\012\001\002\000\014" +
    "\004\020\005\014\006\007\010\010\014\012\001\002\000" +
    "\014\004\020\005\014\006\007\010\010\014\012\001\002" +
    "\000\014\004\020\005\014\006\007\010\010\014\012\001" +
    "\002\000\022\002\ufff3\007\031\010\022\011\024\012\032" +
    "\013\023\024\ufff3\025\ufff3\001\002\000\040\002\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\023\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025" +
    "\uffed\001\002\000\040\002\ufff0\007\ufff0\010\ufff0\011\024" +
    "\012\032\013\023\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\001\002\000\022" +
    "\002\ufff6\007\031\010\022\011\024\012\032\013\023\024" +
    "\ufff6\025\ufff6\001\002\000\022\002\ufff4\007\031\010\022" +
    "\011\024\012\032\013\023\024\ufff4\025\ufff4\001\002\000" +
    "\022\002\ufff2\007\031\010\022\011\024\012\032\013\023" +
    "\024\ufff2\025\ufff2\001\002\000\022\002\ufff5\007\031\010" +
    "\022\011\024\012\032\013\023\024\ufff5\025\ufff5\001\002" +
    "\000\040\002\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\023\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\001\002\000\040\002\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\023\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\001\002\000\040\002\uffef\007\uffef\010\uffef\011\024" +
    "\012\032\013\023\015\uffef\016\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\023\uffef\024\uffef\025\uffef\001\002\000\022" +
    "\002\ufff7\007\031\010\022\011\024\012\032\013\023\024" +
    "\ufff7\025\ufff7\001\002\000\010\002\ufff9\024\051\025\050" +
    "\001\002\000\016\004\ufffb\005\ufffb\006\ufffb\010\ufffb\014" +
    "\ufffb\026\ufffb\001\002\000\016\004\ufffd\005\ufffd\006\ufffd" +
    "\010\ufffd\014\ufffd\026\ufffd\001\002\000\016\004\020\005" +
    "\014\006\007\010\010\014\012\026\013\001\002\000\010" +
    "\002\ufffc\024\ufffc\025\ufffc\001\002\000\016\004\020\005" +
    "\014\006\007\010\010\014\012\026\013\001\002\000\010" +
    "\002\ufffa\024\ufffa\025\ufffa\001\002\000\016\007\031\010" +
    "\022\011\024\012\032\013\023\015\057\001\002\000\040" +
    "\002\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\025\uffea\001\002\000\040\002\uffeb\007\uffeb\010" +
    "\uffeb\011\024\012\032\013\023\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\006\002\004\007\003\001\001\000\012\003" +
    "\014\004\016\005\010\006\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\057\001" +
    "\001\000\002\001\001\000\004\004\055\001\001\000\010" +
    "\004\016\005\046\006\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\045\001\001\000\004\004\044\001" +
    "\001\000\004\004\043\001\001\000\004\004\042\001\001" +
    "\000\004\004\041\001\001\000\004\004\040\001\001\000" +
    "\004\004\037\001\001\000\004\004\036\001\001\000\004" +
    "\004\035\001\001\000\004\004\034\001\001\000\004\004" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\053\001\001\000\004\010\051\001\001\000\010" +
    "\004\016\005\052\006\015\001\001\000\002\001\001\000" +
    "\010\004\016\005\054\006\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

//Codigo de acciones
      

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= DECIMAL 
            {
              NodoC3D RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String decimal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        NodoC3D nodo = new NodoC3D();
                        nodo.setCad(decimal);
                        RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= ENTERO 
            {
              NodoC3D RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        NodoC3D nodo = new NodoC3D();
                        nodo.setCad(entero);
                        RESULT = nodo;  
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= ID 
            {
              NodoC3D RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        NodoC3D nodo = new NodoC3D();
                        nodo.setCad(id);
                        RESULT = nodo; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              NodoC3D RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoC3D exp = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        RESULT = exp; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= MENOS expresion 
            {
              NodoC3D RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D exp = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);

                        NodoC3D nodo = new NodoC3D();
                        nodo.setCad(c3d);
                        nodo.setTemporal(temp);
                        RESULT = nodo; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= expresion POT expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);                    
                        NodoC3D nodo = new NodoC3D();
                        nodo.setCad(temp);

                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= expresion DIV expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);                    
                        NodoC3D nodo = new NodoC3D();
                        nodo.setCad(temp);

                        RESULT = nodo; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= expresion MULT expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);                    
                        NodoC3D nodo = new NodoC3D();
                        nodo.setCad(temp);
                        
                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= expresion MENOS expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);                    
                        NodoC3D nodo = new NodoC3D();
                        nodo.setCad(temp);

                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= expresion MAS expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);                    
                        NodoC3D nodo = new NodoC3D();
                        nodo.setCad(temp);
                        
                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // relacional ::= expresion 
            {
              NodoC3D RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D exp = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // relacional ::= expresion REL_MENI expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                       //SE GENERAN LAS ETIQUETAS DE FALSO Y VERDADERO
                        String etiquetaV = ControlC3D.generarEtiqueta(); // L$
                        String etiquetaF = ControlC3D.generarEtiqueta();//L+1

                         //SE CONCATENA LA CADENA QUE ESTA ESTATICA EN CONTROLC3D.GETC3D() Y SE AGREGA EL IF
                        String c3d = ControlC3D.generarIf(izq.getCad(), der.getCad(), "<=", etiquetaV, etiquetaF)+ "\n";
                        
                        NodoC3D nodo = new NodoC3D();
                        nodo.setEtiquetaVerdadera(etiquetaV);
                        nodo.setEtiquetaFalsa(etiquetaF);
                        ControlC3D.setEtiquetasVerdaderas(etiquetaV);
                        ControlC3D.setEtiquetasFalsas(etiquetaF);
                        ControlC3D.agregarC3D(c3d); //aqui se va concatenando la cadena general
                        nodo.setTemporal(ControlC3D.getC3D());
                        RESULT = nodo; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // relacional ::= expresion REL_MAYI expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                       //SE GENERAN LAS ETIQUETAS DE FALSO Y VERDADERO
                        String etiquetaV = ControlC3D.generarEtiqueta(); // L$
                        String etiquetaF = ControlC3D.generarEtiqueta();//L+1

                         //SE CONCATENA LA CADENA QUE ESTA ESTATICA EN CONTROLC3D.GETC3D() Y SE AGREGA EL IF
                        String c3d = ControlC3D.generarIf(izq.getCad(), der.getCad(), ">=", etiquetaV, etiquetaF)+ "\n";
                        
                        NodoC3D nodo = new NodoC3D();
                        nodo.setEtiquetaVerdadera(etiquetaV);
                        nodo.setEtiquetaFalsa(etiquetaF);
                        ControlC3D.setEtiquetasVerdaderas(etiquetaV);
                        ControlC3D.setEtiquetasFalsas(etiquetaF);
                        ControlC3D.agregarC3D(c3d); //aqui se va concatenando la cadena general
                        nodo.setTemporal(ControlC3D.getC3D());
                        RESULT = nodo; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // relacional ::= expresion REL_MEN expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                         //SE GENERAN LAS ETIQUETAS DE FALSO Y VERDADERO
                        String etiquetaV = ControlC3D.generarEtiqueta(); // L$
                        String etiquetaF = ControlC3D.generarEtiqueta();//L+1

                         //SE CONCATENA LA CADENA QUE ESTA ESTATICA EN CONTROLC3D.GETC3D() Y SE AGREGA EL IF
                        String c3d = ControlC3D.generarIf(izq.getCad(), der.getCad(), "<=", etiquetaV, etiquetaF)+ "\n";
                        
                        NodoC3D nodo = new NodoC3D();
                        nodo.setEtiquetaVerdadera(etiquetaV);
                        nodo.setEtiquetaFalsa(etiquetaF);
                        ControlC3D.setEtiquetasVerdaderas(etiquetaV);
                        ControlC3D.setEtiquetasFalsas(etiquetaF);
                        ControlC3D.agregarC3D(c3d); //aqui se va concatenando la cadena general
                        nodo.setTemporal(ControlC3D.getC3D());
                        RESULT = nodo; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // relacional ::= expresion REL_MAY expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        //SE GENERAN LAS ETIQUETAS DE FALSO Y VERDADERO
                        String etiquetaV = ControlC3D.generarEtiqueta(); // L$
                        String etiquetaF = ControlC3D.generarEtiqueta();//L+1

                         //SE CONCATENA LA CADENA QUE ESTA ESTATICA EN CONTROLC3D.GETC3D() Y SE AGREGA EL IF
                        String c3d = ControlC3D.generarIf(izq.getCad(), der.getCad(), ">", etiquetaV, etiquetaF)+ "\n";
                        
                        NodoC3D nodo = new NodoC3D();
                        nodo.setEtiquetaVerdadera(etiquetaV);
                        nodo.setEtiquetaFalsa(etiquetaF);
                        ControlC3D.setEtiquetasVerdaderas(etiquetaV);
                        ControlC3D.setEtiquetasFalsas(etiquetaF);
                        ControlC3D.agregarC3D(c3d); //aqui se va concatenando la cadena general
                        nodo.setTemporal(ControlC3D.getC3D());
                        RESULT = nodo; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // relacional ::= expresion REL_DIF expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                      //SE GENERAN LAS ETIQUETAS DE FALSO Y VERDADERO
                        String etiquetaV = ControlC3D.generarEtiqueta(); // L$
                        String etiquetaF = ControlC3D.generarEtiqueta();//L+1

                         //SE CONCATENA LA CADENA QUE ESTA ESTATICA EN CONTROLC3D.GETC3D() Y SE AGREGA EL IF
                        String c3d = ControlC3D.generarIf(izq.getCad(), der.getCad(), "!=", etiquetaV, etiquetaF)+ "\n";
                        
                        NodoC3D nodo = new NodoC3D();
                        nodo.setEtiquetaVerdadera(etiquetaV);
                        nodo.setEtiquetaFalsa(etiquetaF);
                        ControlC3D.setEtiquetasVerdaderas(etiquetaV);
                        ControlC3D.setEtiquetasFalsas(etiquetaF);
                        ControlC3D.agregarC3D(c3d); //aqui se va concatenando la cadena general
                        nodo.setTemporal(ControlC3D.getC3D());
                        RESULT = nodo; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // relacional ::= expresion REL_IGUAL expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                       //SE GENERAN LAS ETIQUETAS DE FALSO Y VERDADERO
                        String etiquetaV = ControlC3D.generarEtiqueta(); // L$
                        String etiquetaF = ControlC3D.generarEtiqueta();//L+1

                         //SE CONCATENA LA CADENA QUE ESTA ESTATICA EN CONTROLC3D.GETC3D() Y SE AGREGA EL IF
                        String c3d = ControlC3D.generarIf(izq.getCad(), der.getCad(), "==", etiquetaV, etiquetaF)+ "\n";
                        
                        NodoC3D nodo = new NodoC3D();
                        nodo.setEtiquetaVerdadera(etiquetaV);
                        nodo.setEtiquetaFalsa(etiquetaF);
                        ControlC3D.setEtiquetasVerdaderas(etiquetaV);
                        ControlC3D.setEtiquetasFalsas(etiquetaF);
                        ControlC3D.agregarC3D(c3d); //aqui se va concatenando la cadena general
                        nodo.setTemporal(ControlC3D.getC3D());
                        RESULT = nodo; 
                   
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // logico ::= relacional 
            {
              NodoC3D RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D rel = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rel;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logico",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // logico ::= LOG_NOT logico 
            {
              NodoC3D RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                      
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logico",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // logico ::= logico LOG_OR NT$2 logico 
            {
              NodoC3D RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (NodoC3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                       
                        String c3d = "";
                        NodoC3D nodo = new NodoC3D();
                        ControlC3D.agregarC3D(c3d); //aqui se va concatenando la cadena general
                       ControlC3D.eliminarEtiqueta(izq.getEtiquetaFalsa(), 0);
                        RESULT = nodo; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logico",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 ControlC3D.agregarC3D(izq.getEtiquetaFalsa()+ ";\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // logico ::= logico LOG_AND NT$1 logico 
            {
              NodoC3D RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (NodoC3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                       //SE CONCATENA LA CADENA QUE ESTA ESTATICA EN CONTROLC3D.GETC3D() Y SE AGREGA EL IF
                        String c3d = "";
                        NodoC3D nodo = new NodoC3D();
                        ControlC3D.agregarC3D(c3d); //aqui se va concatenando la cadena general
                        ControlC3D.eliminarEtiqueta(izq.getEtiquetaVerdadera(), 1);
                        RESULT = nodo; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logico",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 ControlC3D.agregarC3D(izq.getEtiquetaVerdadera()+ ";\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= logico 
            {
              NodoC3D RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D log = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = log;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicial ::= NT$0 inicio 
            {
              NodoC3D RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoC3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D exp = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = exp;
                        ControlC3D.agregarC3D("//Etiquetas verdaderas: " + ControlC3D.getEtiquetasVerdaderas() +"\n Etiquetas falsas: "+ControlC3D.getEtiquetasFalsas());
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              NodoC3D RESULT =null;
 ControlC3D.reiniciar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoC3D start_val = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

